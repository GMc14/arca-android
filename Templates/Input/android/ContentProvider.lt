{{$package := .PackageName}}
{{$project := .ProjectName}}
{{$path := .PackagePath}}
<<levo filename:{{titlecase $project}}ContentProvider.java directory:src/{{$path}}/providers>>
package {{$package}}.providers;

import android.net.Uri;

import com.arca.provider.DatabaseProvider;
{{range .Models}}!>
import {{$package}}.datasets.{{titlecase .Name}}Table;
{{end}}!>

public class {{titlecase $project}}ContentProvider extends DatabaseProvider {

	public static final String AUTHORITY = "{{$package}}.providers.{{titlecase $project}}ContentProvider";

	public static final class Uris {
		{{range .Models}}!>
		public static final Uri {{pluralize .Name | snakecase | upper}} = Uri.parse("content://" + AUTHORITY + "/" + Paths.{{pluralize .Name | snakecase | upper}});
		{{end}}!>
	}

	private static final class Paths {
		{{range .Models}}!>
		public static final String {{pluralize .Name | snakecase | upper}} = "{{pluralize .Name | snakecase}}";
		{{end}}!>
	}

	@Override
	public boolean onCreate() {
		{{range .Models}}!>
		registerDataset(AUTHORITY, Paths.{{pluralize .Name | snakecase | upper}}, {{titlecase .Name}}Table.class);
		registerDataset(AUTHORITY, Paths.{{pluralize .Name | snakecase | upper}} + "/*", {{titlecase .Name}}Table.class);
		{{end}}!>
		return true;
	}

}
<<levo>>
{{range .Models}}
<<levo filename:{{titlecase .Name}}Table.java directory:src/{{$path}}/datasets>>
package {{$package}}.datasets;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;

import {{$package}}.models.{{titlecase .Name}};
import com.arca.provider.Column;
import com.arca.provider.ColumnUtils;
import com.arca.provider.SQLiteTable;

public class {{titlecase .Name}}Table extends SQLiteTable {

	public static interface Columns extends SQLiteTable.Columns {
	{{range .Properties}}!>
		{{if isSqliteType .}}!>
		public static final Column {{snakecase .RemoteIdentifier | upper}} = Column.Type.{{toSqliteType .}}.newColumn("{{.LocalIdentifier}}");
		{{end}}!>
	{{end}}!>
	}

	@Override
	public void onCreate(final SQLiteDatabase db) {
		final String columns = ColumnUtils.toString(Columns.class);
		final String unique = "UNIQUE (" + Columns.{{idProp .Properties}}.name + ") ON CONFLICT REPLACE";
		db.execSQL(String.format("CREATE TABLE IF NOT EXISTS %s (%s, %s);", getName(), columns, unique));
	}
	
	@Override
	public void onDrop(final SQLiteDatabase db) {
		db.execSQL(String.format("DROP TABLE IF EXISTS %s;", getName()));
	}
	
	public static ContentValues getContentValues(final {{titlecase .Name}} item) {
		final ContentValues value = new ContentValues();
		{{range .Properties}}!>
			{{if isSqliteType .}}!>
		value.put(Columns.{{snakecase .RemoteIdentifier | upper}}.name, item.get{{titlecase .LocalIdentifier}}());
			{{end}}!>
		{{end}}!>
		return value;
	}
}
<<levo>>
{{end}}
<<levo filename:arca-provider-v1.0-alpha.jar directory:libs>>
{{template "arca-provider-v1.0-alpha.jar"}}
<<levo>>